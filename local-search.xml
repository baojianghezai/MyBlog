<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Qt制作tx会议登录ui——2025第一篇博客！</title>
    <link href="/2025/01/01/Qt%E5%88%B6%E4%BD%9Ctx%E4%BC%9A%E8%AE%AE%E7%99%BB%E5%BD%95ui/"/>
    <url>/2025/01/01/Qt%E5%88%B6%E4%BD%9Ctx%E4%BC%9A%E8%AE%AE%E7%99%BB%E5%BD%95ui/</url>
    
    <content type="html"><![CDATA[<hr><h6 id="样图分析"><a href="#样图分析" class="headerlink" title="样图分析"></a>样图分析</h6><p>首先掏过来一张tx会议的登录图片</p><p><img src="/img/txhyLogin.png" alt="image.png"></p><p>根据老师的课程，先构建协议上方的按钮，首先用到的就是<strong>布局</strong></p><p>上面三个按钮——最小化，关闭，设置</p><p>上面中间再加一个textlabel</p><p>再向中间看去——一个大大的logo</p><p>再往下是两个分割线加一个textlable</p><p>最下面就是四个（这里做的是好久之前的ui界面，当时下面没有邮箱界面），<strong>使用toolbutton，方便同时显示文字和图片</strong></p><h6 id="ui设计分析"><a href="#ui设计分析" class="headerlink" title="ui设计分析"></a>ui设计分析</h6><p>先看一下ui是如何设计的：</p><p>最上面的四个按钮进行水平布局，构成菜单-标题栏，并将大小设置为32*32</p><p>logo使用弹簧固定在中间的中央</p><p>下面其它登录方式和两个分割线进行水平布局，再下面三个toolbutton进行水平布局</p><p>最后整体进行竖直布局</p><h6 id="qtui界面"><a href="#qtui界面" class="headerlink" title="qtui界面"></a>qtui界面</h6><p><img src="/img/txhyLogin_ui.png" alt="image.png"></p><h6 id="ui运行效果图"><a href="#ui运行效果图" class="headerlink" title="ui运行效果图"></a>ui运行效果图</h6><p><img src="/img/txhyLogin1.png" alt="image.png"></p><h6 id="去除外框"><a href="#去除外框" class="headerlink" title="去除外框"></a>去除外框</h6><p>到这已经初步看出来ui的外形了</p><p>但是tx会议的ui是无边框的，所以这里需要将边框去掉</p><p>​项目名.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tencentMettingLogin.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_tencentMettingLogin.h&quot;</span><span class="hljs-comment">//这个头文件加上是因为vs找不到定义的按钮</span></span><br><br>tencentMettingLogin::<span class="hljs-built_in">tencentMettingLogin</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QWidget</span>(parent)<br>&#123;<br>    ui.<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setWindowFlags</span>(Qt::FramelessWindowHint | Qt::WindowMinMaxButtonsHint);<br>    <span class="hljs-comment">//前一个隐藏边框，后一个可以使窗口最小化</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="自己给关闭按钮手写了一个结束函数"><a href="#自己给关闭按钮手写了一个结束函数" class="headerlink" title="自己给关闭按钮手写了一个结束函数"></a>自己给关闭按钮手写了一个结束函数</h6><p>emmmm，由于去掉了外边框，导致结束程序的时候都要去vs里面点停止或者去任务栏点叉叉，因此提前把关闭按钮的槽函数写上**(此处忽略头文件对于槽函数的定义哈)**</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tencentMettingLogin.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_tencentMettingLogin.h&quot;</span><span class="hljs-comment">//这个头文件加上是因为vs找不到定义的按钮</span></span><br><br>tencentMettingLogin::<span class="hljs-built_in">tencentMettingLogin</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QWidget</span>(parent)<br>&#123;<br>    ui.<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setWindowFlags</span>(Qt::FramelessWindowHint | Qt::WindowMinMaxButtonsHint);<br>    <span class="hljs-comment">//前一个隐藏边框，后一个可以使窗口最小化</span><br>    <span class="hljs-built_in">connect</span>(ui.btnClose,&amp;QPushButton::clicked,<span class="hljs-keyword">this</span>,&amp;tencentMettingLogin::btnClose);<br>        <span class="hljs-comment">//（这里使用qt5写法，第一个为信号发出者，第二个为信号类型，第三个为接收信号的指针，第四个为接收信号后执行的操作）</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tencentMettingLogin::btnClose</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="对按钮的图标进行寻找并打包"><a href="#对按钮的图标进行寻找并打包" class="headerlink" title="对按钮的图标进行寻找并打包"></a>对按钮的图标进行寻找并打包</h6><p>因为这里的图标（包括logo和最小化，关闭图标），都需要我们自己打包，放在项目根目录&#x2F;项目名&#x2F;source文件底下</p><p>然后找到项目名.qrc文件，在其中将他们都添加上</p><p><img src="/img/txhyLogin2.png" alt="image.png"></p><h6 id="在cpp文件中对按钮样式进行修改"><a href="#在cpp文件中对按钮样式进行修改" class="headerlink" title="在cpp文件中对按钮样式进行修改"></a>在cpp文件中对按钮样式进行修改</h6><p>首先使用setText方法将按钮显示的文本设置为空</p><p>再使用设置样式表进行图片插入，并且进行相关细节设计</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tencentMettingLogin.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_tencentMettingLogin.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;QDebug&quot;</span></span><br><br>tencentMettingLogin::<span class="hljs-built_in">tencentMettingLogin</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QWidget</span>(parent)<br>&#123;<br>    ui.<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setWindowFlags</span>(Qt::FramelessWindowHint | Qt::WindowMinMaxButtonsHint);<br>    <span class="hljs-comment">//前一个隐藏边框，后一个可以使窗口最小化</span><br>    ui.btnSet-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ui.btnSet-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;background-image:url(:/tencentMettingLogin/resource/set.png);border:none&#125;\</span><br><span class="hljs-string">        QPushButton::hover&#123;background-color:rgb(99,99,99)&#125;&quot;</span>);<br><br>    ui.btnMin-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ui.btnMin-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;background-image:url(:/tencentMettingLogin/resource/min.png);border:none&#125;\</span><br><span class="hljs-string">        QPushButton::hover&#123;background-color:rgb(99,99,99)&#125;&quot;</span>);<br><br>    ui.btnClose-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ui.btnClose-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;background-image:url(:/tencentMettingLogin/resource/close.png);border:none&#125;\</span><br><span class="hljs-string">        QPushButton::hover&#123;background-color:rgb(99,99,99)&#125;&quot;</span>);<br>      <span class="hljs-built_in">connect</span>(ui.btnClose, &amp;QPushButton::clicked, <span class="hljs-keyword">this</span>, &amp;tencentMettingLogin::btnClose);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tencentMettingLogin::btnClose</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">close</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>经过这么一通操作，最顶上的三个按钮就设计好了</p><p><img src="/img/MytxhyLogin2.png" alt="image.png"></p><h6 id="中间logo插入"><a href="#中间logo插入" class="headerlink" title="中间logo插入"></a>中间logo插入</h6><p>（惭愧一下，这里把前面制作图片查看器学的全忘了…..）</p><p>在textlabel中插入图片的方法：</p><p>1.调用clear方法  ::   ui.label_logo-&gt;clear();</p><p>2.使用QPixmap创建实例  ::  QPixmap* pix &#x3D; new QPixmap(“qrc文件中图片路径”);</p><p>3.(将图片全部显示)使用scaled方法，根据给定的尺寸来放大缩小QPixmao</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tex">QPixmap::scaled(const QSize <span class="hljs-built_in">&amp;</span> size, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation) const<br><br> 根据给定的尺寸来放大缩小QPixmap<br><br>IgnoreAspectRatio  矩形框有多大，图片就缩放成多大，不限制原图片的长宽比<br><br>KeepAspectRatio    保持原图片的长宽比，且不超过矩形框的大小<br><br>KeepAspectRatioByExpanding   根据矩形框的大小最大缩放图片<br><br></code></pre></td></tr></table></figure><p>4.设置图片自动缩放  ::  ui.label_logo-&gt;setScaledContents(true);</p><p>5.将图片插入textlabel  ::  ui.label_logo-&gt;setPixmap(*pix);</p><h6 id="两个登录按键设置"><a href="#两个登录按键设置" class="headerlink" title="两个登录按键设置"></a>两个登录按键设置</h6><p>第一个登录按钮直接插入图片即可</p><p>第二个需要根据实际情况进行样式设计（**让我想起了前端的辉煌…….**）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tencentMettingLogin.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_tencentMettingLogin.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;QDebug&quot;</span></span><br><br>tencentMettingLogin::<span class="hljs-built_in">tencentMettingLogin</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QWidget</span>(parent)<br>&#123;<br>    ui.<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setWindowFlags</span>(Qt::FramelessWindowHint | Qt::WindowMinMaxButtonsHint);<br>    <span class="hljs-comment">//前一个隐藏边框，后一个可以使窗口最小化</span><br><br>    ui.btnSet-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ui.btnSet-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;background-image:url(:/tencentMettingLogin/resource/set.png);border:none&#125;\</span><br><span class="hljs-string">        QPushButton::hover&#123;background-color:rgb(99,99,99)&#125;&quot;</span>);<br><br>    ui.btnMin-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ui.btnMin-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;background-image:url(:/tencentMettingLogin/resource/min.png);border:none&#125;\</span><br><span class="hljs-string">        QPushButton::hover&#123;background-color:rgb(99,99,99)&#125;&quot;</span>);<br><br>    ui.btnClose-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ui.btnClose-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;background-image:url(:/tencentMettingLogin/resource/close.png);border:none&#125;\</span><br><span class="hljs-string">        QPushButton::hover&#123;background-color:rgb(99,99,99)&#125;&quot;</span>);<br><br>    ui.label_logo-&gt;<span class="hljs-built_in">clear</span>();<br>    QPixmap* pix = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/tencentMettingLogin/resource/logo.jpg&quot;</span>);<br>    pix-&gt;<span class="hljs-built_in">scaled</span>(ui.label_logo-&gt;<span class="hljs-built_in">size</span>(), Qt::KeepAspectRatio);<br>    ui.label_logo-&gt;<span class="hljs-built_in">setScaledContents</span>(<span class="hljs-literal">true</span>);<br>    ui.label_logo-&gt;<span class="hljs-built_in">setPixmap</span>(*pix);<br><br>    ui.btnWechatLogin-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ui.btnWechatLogin-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;background-image:url(:/tencentMettingLogin/resource/weichatlogin.png);border:none&#125;\</span><br><span class="hljs-string">        QPushButton::hover&#123;background-color:rgb(99,99,99)&#125;&quot;</span>);<br><br>    <span class="hljs-built_in">connect</span>(ui.btnClose, &amp;QPushButton::clicked, <span class="hljs-keyword">this</span>, &amp;tencentMettingLogin::btnClose);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tencentMettingLogin::btnClose</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>控件可以进行自定义样式表设计  ::  <strong>内心OS(感觉语法挺像css的…..)</strong></p><p><img src="/img/txhyLogin3.png" alt="image.png"></p><h6 id="最下面三个其它登录方式设计"><a href="#最下面三个其它登录方式设计" class="headerlink" title="最下面三个其它登录方式设计"></a>最下面三个其它登录方式设计</h6><p>直接使用toolbotton的setIcon方法设置图标</p><p>setIconSize()方法设置大小</p><p>setText()方法设置文本</p><p>setToolButtonStyle(Qt::ToolButtonTextUnderIcon);设置文本在图标下</p><p>最后进行样式调节达到效果即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tencentMettingLogin.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_tencentMettingLogin.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;QDebug&quot;</span></span><br><br>tencentMettingLogin::<span class="hljs-built_in">tencentMettingLogin</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QWidget</span>(parent)<br>&#123;<br>    ui.<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setWindowFlags</span>(Qt::FramelessWindowHint | Qt::WindowMinMaxButtonsHint);<br>    <span class="hljs-comment">//前一个隐藏边框，后一个可以使窗口最小化</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    this-&gt;setStyleSheet(&quot;border:none;background-color:white&quot;);</span><br><span class="hljs-comment">//</span><br>    ui.btnSet-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ui.btnSet-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;background-image:url(:/tencentMettingLogin/resource/set.png);border:none&#125;\</span><br><span class="hljs-string">        QPushButton::hover&#123;background-color:rgb(99,99,99)&#125;&quot;</span>);<br><br>    ui.btnMin-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ui.btnMin-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;background-image:url(:/tencentMettingLogin/resource/min.png);border:none&#125;\</span><br><span class="hljs-string">        QPushButton::hover&#123;background-color:rgb(99,99,99)&#125;&quot;</span>);<br><br>    ui.btnClose-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ui.btnClose-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;background-image:url(:/tencentMettingLogin/resource/close.png);border:none&#125;\</span><br><span class="hljs-string">        QPushButton::hover&#123;background-color:rgb(99,99,99)&#125;&quot;</span>);<br><br>    ui.label_logo-&gt;<span class="hljs-built_in">clear</span>();<br>    QPixmap* pix = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/tencentMettingLogin/resource/logo.jpg&quot;</span>);<br>    pix-&gt;<span class="hljs-built_in">scaled</span>(ui.label_logo-&gt;<span class="hljs-built_in">size</span>(), Qt::KeepAspectRatio);<br>    ui.label_logo-&gt;<span class="hljs-built_in">setScaledContents</span>(<span class="hljs-literal">true</span>);<br>    ui.label_logo-&gt;<span class="hljs-built_in">setPixmap</span>(*pix);<br><br>    ui.btnWechatLogin-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ui.btnWechatLogin-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;background-image:url(:/tencentMettingLogin/resource/weichatlogin.png);border:none&#125;\</span><br><span class="hljs-string">        QPushButton::hover&#123;background-color:rgb(99,99,99)&#125;&quot;</span>);<br><br>    ui.toolBtnPhone-&gt;<span class="hljs-built_in">setIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/tencentMettingLogin/resource/phonelogin.png&quot;</span>));<br>    ui.toolBtnPhone-&gt;<span class="hljs-built_in">setIconSize</span>(<span class="hljs-built_in">QSize</span>(<span class="hljs-number">60</span>, <span class="hljs-number">60</span>));<br>    ui.toolBtnPhone-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;手机号&quot;</span>);<br>    ui.toolBtnPhone-&gt;<span class="hljs-built_in">setToolButtonStyle</span>(Qt::ToolButtonTextUnderIcon);<br>    ui.toolBtnPhone-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;border:none;background-color:white&quot;</span>);<br><br>    ui.toolBtnEnpriseWechat-&gt;<span class="hljs-built_in">setIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/tencentMettingLogin/resource/enpriseweichat.png&quot;</span>));<br>    ui.toolBtnEnpriseWechat-&gt;<span class="hljs-built_in">setIconSize</span>(<span class="hljs-built_in">QSize</span>(<span class="hljs-number">60</span>, <span class="hljs-number">60</span>));<br>    ui.toolBtnEnpriseWechat-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;企业微信&quot;</span>);<br>    ui.toolBtnEnpriseWechat-&gt;<span class="hljs-built_in">setToolButtonStyle</span>(Qt::ToolButtonTextUnderIcon);<br>    ui.toolBtnEnpriseWechat-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;border:none;background-color:white&quot;</span>);<br><br>    ui.toolBtnSSO-&gt;<span class="hljs-built_in">setIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/tencentMettingLogin/resource/sso.png&quot;</span>));<br>    ui.toolBtnSSO-&gt;<span class="hljs-built_in">setIconSize</span>(<span class="hljs-built_in">QSize</span>(<span class="hljs-number">60</span>, <span class="hljs-number">60</span>));<br>    ui.toolBtnSSO-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;SSO&quot;</span>);<br>    ui.toolBtnSSO-&gt;<span class="hljs-built_in">setToolButtonStyle</span>(Qt::ToolButtonTextUnderIcon);<br>    ui.toolBtnSSO-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;border:none;background-color:white&quot;</span>);<br><br>    <span class="hljs-built_in">connect</span>(ui.btnClose, &amp;QPushButton::clicked, <span class="hljs-keyword">this</span>, &amp;tencentMettingLogin::btnClose);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tencentMettingLogin::btnClose</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">close</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="遇到的些小问题"><a href="#遇到的些小问题" class="headerlink" title="遇到的些小问题"></a>遇到的些小问题</h6><p>1.vs用起来不大习惯，比如按ctrl+k再按ctrl+c才可以进行注释，按ctrl+k再按ctrl+u进行取消</p><p>2.构建项目的时候总是显示字符偏移什么的，是因为没有设置编码选项-&gt;解决方法：高级保存选项-&gt;改为utf-8</p><p>3.vs中打开sln文件来进行资源管理</p><p>4.在ui中定义的按钮无法在提示中出现：#include “ui_tencentMettingLogin.h”，包含上一个ui头文件即可</p><hr><p>别的应该没了，也算是码完新年第一篇博客了，2025快乐哦各位！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/11/29/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF/"/>
    <url>/2024/11/29/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="第三章：系统总线"><a href="#第三章：系统总线" class="headerlink" title="第三章：系统总线"></a>第三章：系统总线</h1><h2 id="3-1基本概念"><a href="#3-1基本概念" class="headerlink" title="3.1基本概念"></a>3.1基本概念</h2><h3 id="五大部件之间的互联方式"><a href="#五大部件之间的互联方式" class="headerlink" title="五大部件之间的互联方式"></a>五大部件之间的互联方式</h3><h4 id="分散连接"><a href="#分散连接" class="headerlink" title="分散连接"></a>分散连接</h4><p>各部件之间使用单独的连线</p><h4 id="总线连接"><a href="#总线连接" class="headerlink" title="总线连接"></a>总线连接</h4><p>各部件连到一组公共信息传输线上</p><h3 id="总线的概念"><a href="#总线的概念" class="headerlink" title="总线的概念"></a>总线的概念</h3><p>总线是连接多个部件的信息传输线，是各部件共享的传输介质。</p><p>特点：在某一时刻，只允许有一个部件向总线发送信息，而多个部件可以同时从总线上接收<strong>相同的</strong>信息</p><h3 id="总线结构的计算机（举例）"><a href="#总线结构的计算机（举例）" class="headerlink" title="总线结构的计算机（举例）"></a>总线结构的计算机（举例）</h3><h4 id="1-以CPU为中心的双总线结构"><a href="#1-以CPU为中心的双总线结构" class="headerlink" title="1.以CPU为中心的双总线结构"></a>1.以CPU为中心的双总线结构</h4><p><img src="C:\Users\Jakebiu\Desktop\jizu.3.1.png" alt="jizu.3.1"></p><p>其中一组总线连接CPU和主存，称为<strong>储存总线</strong>（M总线），另一组连接CPU和I&#x2F;O设备，成为<strong>输入输出总线</strong>（I&#x2F;O总线）</p><p><strong>缺点：</strong> <strong>IO设备与主存交换信息</strong>时需要经过CPU</p><p>如果将CPU，主存和IO设备接到同一组总线上，便形成了单总线结构的计算机</p><h4 id="2-单总线结构的计算机"><a href="#2-单总线结构的计算机" class="headerlink" title="2.单总线结构的计算机"></a>2.单总线结构的计算机</h4><p><img src="C:\Users\Jakebiu\Desktop\jizu.3.2.jpeg" alt="jizu.3.2"></p><p>相较上一个，这个最明显的特点就是IO设备与主存交换信息的时候，原则上不会影响CPU</p><p><strong>但是！</strong>，当某一刻各部件都要占用总线的时候，就会发生冲突，为此必须设置总线判优逻辑，让各部件按优先级高低来占用总线</p><p>我们可以想到在CPU和内存之间再加上一组总线</p><h4 id="3-以存储器为中心的双总线结构"><a href="#3-以存储器为中心的双总线结构" class="headerlink" title="3.以存储器为中心的双总线结构"></a>3.以存储器为中心的双总线结构</h4><p><img src="C:\Users\Jakebiu\Desktop\jizu.3.3.jpeg" alt="jizu.3.3"></p><p>在单总线的基础上又开辟出一条CPU和主存之间的总线，成为存储总线（见图）。这样既提高了传输效率，又减轻了系统总线的负担，还保留了IO设备与存储器交换信息时不经过CPU的特点</p><p>现代计算机多使用四总线结构（了解就行）</p><h2 id="3-2总线的分类"><a href="#3-2总线的分类" class="headerlink" title="3.2总线的分类"></a>3.2总线的分类</h2><p>总线可以按照不同的方式分为不同的种类，这里按照连接部件不同，分为<strong>片内总线，系统总线和通信总线</strong></p><h3 id="片内总线"><a href="#片内总线" class="headerlink" title="片内总线"></a>片内总线</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>芯片内部的总线</p><p>如CPU芯片内部，寄存器与寄存器之间等等</p><h3 id="系统总线"><a href="#系统总线" class="headerlink" title="系统总线"></a>系统总线</h3><h4 id="概念：-1"><a href="#概念：-1" class="headerlink" title="概念："></a>概念：</h4><p>CPU，主存，IO设备各大部件之间的信息传输线。又被称作板级总线或板间总线。</p><p>按系统总线传输信息不同，又可以分为三类：数据总线，地址总线和控制总线</p><h4 id="数据总线："><a href="#数据总线：" class="headerlink" title="数据总线："></a>数据总线：</h4><p>用来传输各功能部件之间的<strong>数据信息</strong>，双向传输总线，其位数与机器字长、存储字长有关</p><p>数据总线位数被称为数据总线宽度，它是衡量系统性能的一个重要参数（计导中好像讲过…）</p><h4 id="地址总线："><a href="#地址总线：" class="headerlink" title="地址总线："></a>地址总线：</h4><p>主要用来指出数据总线上的源数据或目的数据在主存单元的<strong>地址</strong>或IO设备的<strong>地址</strong></p><p>可见，地址总线上的代码是用来指出CPU欲访问的存储单元或IO端口的<strong>地址</strong> ， 由<strong>CPU输出，单向传输</strong> ，地址总线的位数与存储单元的个数有关（比如位数为8，那么根据二进制就可以表示2^8 个地址，也就有2^8个存储单元）</p><h4 id="控制总线："><a href="#控制总线：" class="headerlink" title="控制总线："></a>控制总线：</h4><p>用来<strong>发出各种控制信号</strong></p><p>因为数据总线和地址总线都被挂在总线上所有部件共享，所以需要有个东西来控制各部件在不同时刻占有总线使用权，因此控制总线就这么诞生了</p><p>特点：对任一控制线而言，它的传输是单向的。（CPU向IO设备发出读或者写请求的时候，是CPU-&gt;IO设备的控制总线发出信号；当其它设备需要获得总线使用权时，需要对CPU发出总线请求，这时是设备-&gt;CPU，所以对于CPU来说，控制信号有输入也有输出，但是靠的是接在上面的至少两根线）</p><p>常见的控制信号</p><ul><li>时钟</li><li>复位</li><li>总线请求</li><li>总线允许</li><li>中断请求</li><li>中断响应</li><li>存储器写</li><li>存储器读</li><li>IO读</li><li>IO写</li><li>传输响应</li></ul><h3 id="通信总线"><a href="#通信总线" class="headerlink" title="通信总线"></a>通信总线</h3><p>用于计算机系统之间或计算机系统与其他系统之间的通信。（个人感觉就是计算机拓展了，通过这个将主机和外部设备联系在一起）</p><p>按传输方式可以分为两种：<strong>串行通信</strong>和<strong>并行通信</strong></p><h4 id="串行通信："><a href="#串行通信：" class="headerlink" title="串行通信："></a>串行通信：</h4><p>指数据在单条1位宽的传输线上，一位一位地按顺序分时传送。eg：1字节的数据，在串行传送中，1字节的数据要通过一条传输线分8次<strong>由低位到高位</strong>按顺序逐位递送</p><h4 id="并行通信："><a href="#并行通信：" class="headerlink" title="并行通信："></a>并行通信：</h4><p>指数据在多条并行1位宽的传输线上，同时由源传送到目的地。eg：1字节的数据（8比特），在并行传输中，要通过8条并行传输线同时由源传送到目的地</p><h4 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h4><p>并行适用与近距离的数据传输（30m以内），串行适用于远距离传输</p><h2 id="3-3总线特性及性能指标"><a href="#3-3总线特性及性能指标" class="headerlink" title="3.3总线特性及性能指标"></a>3.3总线特性及性能指标</h2><h3 id="总线的特性"><a href="#总线的特性" class="headerlink" title="总线的特性"></a>总线的特性</h3><p>包括<strong>机械特性，电气特性，功能特性，时间特性</strong></p><h4 id="机械特性："><a href="#机械特性：" class="headerlink" title="机械特性："></a>机械特性：</h4><p>在机械连接方式上的一些性能，如插头和插座使用的标准</p><h4 id="电气特性："><a href="#电气特性：" class="headerlink" title="电气特性："></a>电气特性：</h4><p>指总线的每一根传输线上信号的传递方向和有效的电平范围</p><h4 id="功能特性："><a href="#功能特性：" class="headerlink" title="功能特性："></a>功能特性：</h4><p>总线中每根传输线的功能</p><h4 id="时间特性："><a href="#时间特性：" class="headerlink" title="时间特性："></a>时间特性：</h4><p>总线中任一根线在什么时间内有效</p><h3 id="总线性能指标"><a href="#总线性能指标" class="headerlink" title="总线性能指标"></a>总线性能指标</h3><h4 id="总线宽度："><a href="#总线宽度：" class="headerlink" title="总线宽度："></a>总线宽度：</h4><p>通常是指数据总线的根数，用bit表示</p><h4 id="总线带宽："><a href="#总线带宽：" class="headerlink" title="总线带宽："></a>总线带宽：</h4><p>总线的数据传输速率，即单位时间内总线上传输数据的位数</p><h4 id="时钟同步-异步："><a href="#时钟同步-异步：" class="headerlink" title="时钟同步&#x2F;异步："></a>时钟同步&#x2F;异步：</h4><p>总线上的数据与时钟同步工作的总线称为同步总线，与时钟不同步工作的总线称为异步总线</p><h4 id="总线复用："><a href="#总线复用：" class="headerlink" title="总线复用："></a>总线复用：</h4><p>一条信号线上分时传送两种信号</p><h4 id="信号线数："><a href="#信号线数：" class="headerlink" title="信号线数："></a>信号线数：</h4><p>地址总线，数据总线和控制总线三种总线数的总和</p><h4 id="总线控制方式："><a href="#总线控制方式：" class="headerlink" title="总线控制方式："></a>总线控制方式：</h4><p>包括突发工作，自动配置，仲裁方式，逻辑方式，计数方式等</p><h4 id="其它指标："><a href="#其它指标：" class="headerlink" title="其它指标："></a>其它指标：</h4><p>如负载能力，电源电压等等</p><h3 id="总线标准"><a href="#总线标准" class="headerlink" title="总线标准"></a>总线标准</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计组第一章整理</title>
    <link href="/2024/11/28/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/"/>
    <url>/2024/11/28/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章：计算机系统概论"><a href="#第一章：计算机系统概论" class="headerlink" title="第一章：计算机系统概论"></a>第一章：计算机系统概论</h1><h2 id="1-2-计算机组成部分"><a href="#1-2-计算机组成部分" class="headerlink" title="1.2 计算机组成部分"></a>1.2 计算机组成部分</h2><h4 id="冯诺依曼计算机五大组成部分：运算器，存储器，控制器，输入设备，输出设备"><a href="#冯诺依曼计算机五大组成部分：运算器，存储器，控制器，输入设备，输出设备" class="headerlink" title="冯诺依曼计算机五大组成部分：运算器，存储器，控制器，输入设备，输出设备"></a>冯诺依曼计算机五大组成部分：运算器，存储器，控制器，输入设备，输出设备</h4><h4 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h4><p>​运算器：用来完成算数运算和逻辑运算，并将运算的中间结果暂存在运算器内</p><p>​存储器：用来存放数据和程序</p><p>​控制器：用来控制，指挥程序和数据的输入，运行以及处理运算结果</p><p>​I&#x2F;O设备：懂得都懂</p><span id="more"></span><h4 id="在大规模集成电路制作工艺出现后，运算器和控制器往往集成在同一芯片上，因此通常叫作——中央处理器（CPU）"><a href="#在大规模集成电路制作工艺出现后，运算器和控制器往往集成在同一芯片上，因此通常叫作——中央处理器（CPU）" class="headerlink" title="在大规模集成电路制作工艺出现后，运算器和控制器往往集成在同一芯片上，因此通常叫作——中央处理器（CPU）"></a>在大规模集成电路制作工艺出现后，运算器和控制器往往集成在同一芯片上，因此通常叫作——中央处理器（CPU）</h4><p>这样，现代计算机就可以认为由三大部分组成：CPU，IO设备，主存储器</p><p><img src="/img/jizu.1.1.png" alt="1"></p><p>​-上图实线为控制线，虚线为反馈线，双向箭头为数据线</p><hr><p>再看一下更细分的图</p><p><img src="/img/jizu.1.2.png" alt="2"></p><p>先认识一下几个部件的名称</p><p>运算器：</p><p>​ACC：累加器</p><p>​MQ：乘商寄存器</p><p>​ALU：算数逻辑单元</p><p>​X：操作数寄存器</p><p>控制器：</p><p>​CU：分析指令</p><p>​IR：指令寄存器</p><p>​PC：程序计数器</p><p>主存储器：</p><p>​M：主存储体</p><p>​MDR：存储器数据寄存器（D：data）</p><p>​MAR：存储器地址寄存器（A：address）</p><p><a href="https://zhuanlan.zhihu.com/p/115007548">五分钟理解主存储器的基本组成结构 - 知乎 (zhihu.com)</a></p><p>发现一篇介绍主存的文章，对应理解下面存储容量公式十分有利</p><hr><h2 id="1-3-定义部分"><a href="#1-3-定义部分" class="headerlink" title="1.3 定义部分"></a>1.3 定义部分</h2><h3 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h3><h4 id="机器字长：CPU一次能处理的数据位数"><a href="#机器字长：CPU一次能处理的数据位数" class="headerlink" title="机器字长：CPU一次能处理的数据位数"></a>机器字长：CPU一次能处理的数据位数</h4><p>通常与CPU寄存器位数有关，字长越长，数的范围越大，精度也越高。机器的字长也会影响机器的运算速度</p><p>机器字长对硬件的造价也有较大影响（贵）</p><h4 id="存储容量：包括主存容量和辅存容量"><a href="#存储容量：包括主存容量和辅存容量" class="headerlink" title="存储容量：包括主存容量和辅存容量"></a>存储容量：包括主存容量和辅存容量</h4><p>主存容量：指主存（M）中存放二进制代码的总位数</p><p>公式：<strong>存储容量&#x3D;存储单元个数*存储字长</strong></p><p><img src="/img/jizu.1.3.jpg" alt="3"></p><p>通过这张图应该很容易理解公式了，存储体分为若干个存储单元，存储单元内又可容纳若干二进制数位，那么我们将一个存储单元内能容纳二进制数的位数称为<strong>储存字长</strong>，这样我们的存储容量就可以很轻松计算出来了</p><p>书上又提到：<strong>MAR</strong>的位数<strong>反映</strong>了<strong>存储单元个数</strong>，<strong>MDR</strong>的位数<strong>反映</strong>了<strong>存储字长</strong>(反映不是等于)</p><blockquote><p>举例：MAR为16位，则存储体内有2^16 &#x3D; 65 536个存储单元，MDR为32位，则存储容量&#x3D;2^16 * 32 &#x3D; 2^16 * 2^5 &#x3D; 2^21 &#x3D; 2 M 位 </p></blockquote><p>要理解这部分首先需要<strong>计算机存储单位</strong>换算知识</p><p>比特为计算机内最小的存储单位，记作bit（b），一个二进制位表示一比特</p><p>其次是字节（byte），八个二进制位表示一个字节（也就是1byte &#x3D; 8 bit）</p><p>再往上都是1024进制了，从小到大列举出来就是</p><p>bit(b)-&gt;byte(B)-&gt;KB-&gt;MB-&gt;GB</p><blockquote><p><strong>MAR存储的为地址</strong>，一个地址对应一个存储单元，那么16位的地址长度，可以有2^16种组合，也就是可以控制2^16个存储单元，那存储单元数这不就出来了</p></blockquote><blockquote><p><strong>MDR存储的为数据</strong>，若数据位x位数据，则存储字长就是x位</p></blockquote><h4 id="运算速度：早期用完成一次加法或乘法所需的时间来衡量运算速度（普通法）"><a href="#运算速度：早期用完成一次加法或乘法所需的时间来衡量运算速度（普通法）" class="headerlink" title="运算速度：早期用完成一次加法或乘法所需的时间来衡量运算速度（普通法）"></a>运算速度：早期用完成一次加法或乘法所需的时间来衡量运算速度（普通法）</h4><h4 id="后面采用吉普森法，综合考虑每条指令的执行时间以及它们在全部操作中所占的百分比"><a href="#后面采用吉普森法，综合考虑每条指令的执行时间以及它们在全部操作中所占的百分比" class="headerlink" title="后面采用吉普森法，综合考虑每条指令的执行时间以及它们在全部操作中所占的百分比"></a>后面采用吉普森法，综合考虑每条指令的执行时间以及它们在全部操作中所占的百分比</h4><p>相关因素：机器的主频，执行什么样的操作，主存本身的速度等</p>]]></content>
    
    
    
    <tags>
      
      <tag>计组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双指针</title>
    <link href="/2024/11/27/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <url>/2024/11/27/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1147">洛谷-P1147 连续自然数和</a></p><p>先来看一道例题</p><p>先来理解一下题意：给出一个整数M，构建一个从1到M的数列，然后从数列中选出一个l和r，如果<strong>l+(l+1)+(l+2)+……+r &#x3D; M</strong> 的话，则输出l和r</p><span id="more"></span><p>正常思路：从0到M枚举l，再去找出是否存在r值满足上面条件</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">su</span><span class="hljs-params">( <span class="hljs-type">int</span> l , <span class="hljs-type">int</span> r )</span> <span class="hljs-comment">//求出l到r所有数的和</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> suma = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = l; i &lt;= r ; i++ )<br>    &#123;<br>        suma += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> suma;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> l = <span class="hljs-number">1</span> ; l &lt;= m ; l++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> r = l ; r &lt;= m ; r++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span>( <span class="hljs-built_in">su</span>(l,r) == m )<br>            &#123;<br>                cout&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>嗯~再去瞅一眼时间复杂度</p><p><img src="/img/shuangzhizhen1.png" alt="image.png"></p><p>两层for循环，N^2了，再加上su函数也算一个l到r的循环</p><p>因此……时间复杂度来到了恐怖的N^3</p><p>M的数据量在10~2e6之间，所以这道题用这种方法的话包<strong>超时的</strong></p><p>再想想怎么去优化</p><p>首先想的的是我真的需要循环这么多次数吗？</p><p>由题目中描述<strong>“给出一个满足条件的连续正整数段中的第一个数和最后一个数”</strong>，可以知道两个数必然是连续的，又想到在M&#x2F;2往后将不会满足条件→当l&#x3D;M&#x2F;2的时候，下一个就已经超过M&#x2F;2，因此循环可以减少一半</p><p>再去想，当我的某个l找到对应的r之后，还需要继续去移动我的r指针吗？</p><p>→很明显答案是不需要，因为这时候r再+1的话，结果必定会大于M</p><p>因此我们可以直接break掉</p><p>修改之后的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">su</span><span class="hljs-params">( <span class="hljs-type">int</span> l , <span class="hljs-type">int</span> r )</span> <span class="hljs-comment">//求出l到r所有数的和</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> suma = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = l; i &lt;= r ; i++ )<br>    &#123;<br>        suma += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> suma;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> l = <span class="hljs-number">1</span> ; l &lt;= m/<span class="hljs-number">2</span> ; l++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> r = l ; r &lt;= m/<span class="hljs-number">2</span> ; r++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span>( <span class="hljs-built_in">su</span>(l,r) == m )<br>            &#123;<br>                cout&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度还是很大，这时候又可以想到从l加到r可以用一个叫前缀和的东西去解决</p><p>因此构建前缀和数组，优化函数部分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= m ; i++ )  <span class="hljs-comment">//构建前缀和数组</span><br>    &#123;<br>        a[i] = a[i<span class="hljs-number">-1</span>] + i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> l = <span class="hljs-number">1</span> ; l &lt;= m/<span class="hljs-number">2</span> ; l++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> r = l ; r &lt;= m/<span class="hljs-number">2</span> ; r++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span>( a[r]-a[l<span class="hljs-number">-1</span>] == m )<br>            &#123;<br>                cout&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好，时间复杂度已经优化到N^2&#x2F;4 了</p><p>但是还是非常大</p><p>这时候再去想：</p><p>枚举l的时候，是否需要将r移动到l+1的地方</p><p>推断一下：用<strong>sum表示从l加到r</strong>，假设此时sum&#x3D;&#x3D;m，当l往右移动一个的时候，sum变为sum-l，此时如果将r向右移动的话，必然会导致最终的sum&gt;m，这时候只能将l再次向右移动，但移动到什么程度为止，很明显我们不能非常容易的得到答案</p><p>那么我们可以去换一种思路</p><p>我将sum和m状态分为三种</p><blockquote><p>sum &gt; m</p></blockquote><blockquote><p>sum &#x3D; m</p></blockquote><blockquote><p>sum &lt; m</p></blockquote><p>在这三种状态下，再去想需要进行什么操作</p><blockquote><p><strong>sum &gt; m</strong> 需要去减小sum，要么l向右，要么r向左，由于我们需要将指针向一个方向移动，所以需要将l向右移动→既<strong>l++</strong></p></blockquote><blockquote><p>sum &#x3D; m 记录并输出</p></blockquote><blockquote><p><strong>sum &lt; m</strong> 需要增大sum，l向左移动，或者r向右移动，和第一个一样，选择向右移动→既<strong>r++</strong></p></blockquote><p>那这时候可能就会有杠精站出来了：</p><p>要是l向右移动的时候，漏掉了正确答案呢（也就是r需要向左动去寻找答案）</p><p>那这里咱也可以去推断一下嗷</p><p>首先l初始为1，r根据判断条件，无非两种结果：要么找到了sum&#x3D;m的点，要么直接变成sum &gt; m ，接下来就是去移动l了，当l向右移动过程中，如果有<strong>合适的r值</strong>，那么肯定是和l一起连续移动，那么一定会与<strong>现在的r值</strong>重合或者掠过，重合就是sum&#x3D;m，略过就是sum&gt;m，需要再去移动r，因此可以知道l向右移动的时候一定不会出现略过正确答案的情况</p><p>因此代码最终形态就变成了这样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= m ; i++ )<br>    &#123;<br>        a[i] = a[i<span class="hljs-number">-1</span>] + i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> l = <span class="hljs-number">1</span> , r = <span class="hljs-number">1</span> ; l &lt;= m/<span class="hljs-number">2</span> + <span class="hljs-number">1</span> ;)<br>    &#123;<br>        <span class="hljs-type">int</span> x = a[r] - a[l<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">while</span>( x &lt; m )<br>        &#123;<br>            r++;<br>            x = a[r] - a[l<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">while</span>( x &gt; m )<br>        &#123;<br>            l++;<br>            x = a[r] - a[l<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">if</span>( x == m )<br>        &#123;<br>            cout&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;<br>            l++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>( r &gt; m || l &gt; m/<span class="hljs-number">2</span> ) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;但是由于这道题数据卡的不是很严格，所以下面这种做法也可以</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N],b[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= m/<span class="hljs-number">2</span> + <span class="hljs-number">1</span> ; i++ )<br>    &#123;<br>        a[i] = i;<br>        b[i] = b[i<span class="hljs-number">-1</span>] + a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> l = <span class="hljs-number">1</span> ; l &lt;= m/<span class="hljs-number">2</span> + <span class="hljs-number">1</span> ; l++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> r = l<span class="hljs-number">+1</span> ; r &lt;= m/<span class="hljs-number">2</span> + <span class="hljs-number">1</span> ; r++ )<br>        &#123;<br>            <span class="hljs-type">int</span> x = b[r] - b[l<span class="hljs-number">-1</span>];<br>            <span class="hljs-keyword">if</span>( x &gt; m ) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span>( x == m )<br>            &#123;<br>                cout&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种思路就是当我r找的时候，如果发现sum&gt;m，那么就没有必要寻找下去了，直接break掉将l向右移动一个</p><p>这个时间复杂度的话，假设r做多找到m&#x2F;2，那么就是m^2&#x2F;4，其实随着l越来越大，r需要找的就更少，因此时间应该是远少于这个值的，具体看测试点吧，个人不太推荐这种做法</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前缀和</title>
    <link href="/2024/11/23/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <url>/2024/11/23/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p>前期最像算法的“基础算法”</p><p>首先看看怎么来的前缀和算法</p><p><a href="https://www.luogu.com.cn/problem/P8218">题目传送门</a></p><p>（经典例题区间和）</p><p>学前缀和之前：</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> n;<br>  cin&gt;&gt;n;<br>  <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>  &#123;<br>    cin&gt;&gt;a[i];<br>  &#125;<br>  <span class="hljs-type">int</span> m;<br>  cin&gt;&gt;m;<br>  <span class="hljs-keyword">while</span>( m-- )<br>  &#123;<br>    <span class="hljs-type">int</span> l,r;<br>    cin&gt;&gt;l&gt;&gt;r;<br>    <span class="hljs-type">int</span> su = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = l ; i &lt;= r ; i++ )<br>      su += a[i];<br>    cout&lt;&lt;su&lt;&lt;endl;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后浅浅看一眼时间复杂度</p><p><img src="/img/qianzhuihe1.png" alt="image.png"></p><p><code>对于所有测试数据，n,m≤10^5,ai​≤10^4</code></p><p>时间复杂度是O(m*(r-l))&#x3D;O(m*n)</p><p>所以我们取极限水准：m&#x3D;1e5,n&#x3D;1e5</p><p>算一下运算次数：10的10次方…….</p><p>正常来说算法题目使用c++一秒的运算次数在<strong>10的8次方</strong>左右</p><p>所以这么做的话肯定是完成不了我们的题目，由此我们就需要去寻找一个更好的计算方法→前缀和算法</p><p>前缀和思想：已知一个固定的序列，我想要求出从某个下标加到另一个下标，那么就可以使用累加的公式稍微变形</p><p>公式推导过程：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++">b[i] = a[<span class="hljs-number">1</span>] + a[<span class="hljs-number">2</span>] +......+ a[i]  <span class="hljs-comment">//前缀和定义     .1</span><br>b[j] = a[<span class="hljs-number">1</span>] + a[<span class="hljs-number">2</span>] +......+ a[i] + a[i<span class="hljs-number">+1</span>] +......+ a[j]    <span class="hljs-comment">//.2</span><br><span class="hljs-comment">//假设现在我要求a[i] 加到 a[j] 的和(j&gt;i)</span><br>将<span class="hljs-number">1</span>式和<span class="hljs-number">2</span>式上下相减可得<br>b[j] - b[i] = a[i<span class="hljs-number">+1</span>] + a[i<span class="hljs-number">+2</span>] +......+ a[j]<br><span class="hljs-comment">//发现等号右边加上个a[i]就是我们需要的东西了，所以等式两边同时加上a[i]</span><br>b[j] - b[i] + a[i] = a[i] + a[i<span class="hljs-number">+1</span>] + a[i<span class="hljs-number">+2</span>] +......+ a[j]<br><span class="hljs-comment">//所以右边那一大串就可以简化为</span><br>b[j] - b[i] + a[i]<br><span class="hljs-comment">//再根据b[i]定义</span><br>b[i] = a[<span class="hljs-number">1</span>] + a[<span class="hljs-number">2</span>] +......+ a[i]<br><span class="hljs-comment">//代换一下</span><br>b[j] - (a[<span class="hljs-number">1</span>]+a[<span class="hljs-number">2</span>]+....+a[i]) + a[i]<br>=b[j] - (a[<span class="hljs-number">1</span>]+a[<span class="hljs-number">2</span>]+......+a[i<span class="hljs-number">-1</span>])<br>=b[j] - b[i<span class="hljs-number">-1</span>]<br></code></pre></td></tr></table></figure><p>至此，前缀和公式推导完毕</p><p>接下来就是补充细节问题</p><ol><li><p>b[i]如果只用公式求，那么时间复杂度会非常大,运算次数：1+2+3+4+….+n,但是我们可以运用一下递推：b[i] &#x3D; b[i-1] + a[i],这样时间花费就会降到n次</p></li><li><p>根据递推公式和题目要求，如果原数组用不到的话，可以将a数组直接变成一个前缀和数组:a[i] &#x3D; a[i-1] + a[i]</p></li></ol><p>最终代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,l,r;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++ )<br>    &#123;<br>        cin&gt;&gt;a[i];<br>        a[i] = a[i<span class="hljs-number">-1</span>] + a[i];<br>    &#125;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">while</span>( m-- )<br>    &#123;<br>        cin&gt;&gt;l&gt;&gt;r;<br>        cout&lt;&lt; a[r] - a[l<span class="hljs-number">-1</span>] &lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>差分</title>
    <link href="/2024/11/23/%E5%B7%AE%E5%88%86/"/>
    <url>/2024/11/23/%E5%B7%AE%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2367">差分模板题传送门-洛谷</a></p><h4 id="差分经典模板题"><a href="#差分经典模板题" class="headerlink" title="差分经典模板题"></a>差分经典模板题</h4><p>还是看一下没学差分之前，暴力解题的代码</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e6</span><span class="hljs-number">+10</span>;<span class="hljs-comment">//根据题目给出的n值确定数组大小</span><br><span class="hljs-type">int</span> a[N];            <span class="hljs-comment">//确定数组大小</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++ )<br>    &#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">while</span>( m-- )     <span class="hljs-comment">//m次循环的快捷写法</span><br>    &#123;<br>        <span class="hljs-type">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = x ; i &lt;= y ; i++ )<br>        &#123;<br>            a[i] += z;   <span class="hljs-comment">//从第x到第y个学生的成绩加z</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> mi = <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++ )<br>    &#123;<br>        mi = <span class="hljs-built_in">min</span>(mi,a[i]);     <span class="hljs-comment">//寻找最小值</span><br>    &#125;<br>    cout&lt;&lt;mi;<br>&#125;<br></code></pre></td></tr></table></figure><p>再简单分析一下时间复杂度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">while</span>( m-- )     <span class="hljs-comment">//m次循环的快捷写法</span><br>    &#123;<br>        <span class="hljs-type">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = x ; i &lt;= y ; i++ )<br>        &#123;<br>            a[i] += z;   <span class="hljs-comment">//从第x到第y个学生的成绩加z</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>很明显这段代码就是我们运算次数最多的，看一下数据量</p><p><img src="/img/chafen1.png" alt="image.png"></p><p>可以发现n的极限为5<em>10的6次方，所以for循环内最大就是5</em>10的6次方</p><p>再结合m次循环，可以发现是一个O(n^2)的时间复杂度，很明显会超时</p><p><img src="/img/chafen2.png" alt="image.png"></p><p>也就是这样</p><h4 id="那怎么去优化我们的过程呢"><a href="#那怎么去优化我们的过程呢" class="headerlink" title="那怎么去优化我们的过程呢"></a>那怎么去优化我们的过程呢</h4><p>分析整个代码，我们可以发现，<code>while(m--)</code>这个循环是题目要求所必须的，所以只能对while里面的for循环下手</p><p>这里就可以从伟大的数学家那里窃取亿点点思路了</p><p>这里借鉴网上和我自己理解，写出俩差分的思路</p><p><img src="/img/chafen3.png" alt="image.png"></p><p><img src="/img/chafen4.png" alt="image.png"></p><h4 id="由此我们可以考虑构建一个差分数组，让b-i-a-i-a-i-1-i-0"><a href="#由此我们可以考虑构建一个差分数组，让b-i-a-i-a-i-1-i-0" class="headerlink" title="由此我们可以考虑构建一个差分数组，让b[i]&#x3D;a[i]-a[i-1]   (i&gt;0)"></a>由此我们可以考虑构建一个差分数组，让b[i]&#x3D;a[i]-a[i-1]   (i&gt;0)</h4><h4 id="通过改变b-i-的值来进行-i-后面元素统一修改，再通过改变结束位置的值来进行加减相互抵消，达成区域快速加减的目的，最后通过前缀和得到原数组"><a href="#通过改变b-i-的值来进行-i-后面元素统一修改，再通过改变结束位置的值来进行加减相互抵消，达成区域快速加减的目的，最后通过前缀和得到原数组" class="headerlink" title="通过改变b[i]的值来进行[i]后面元素统一修改，再通过改变结束位置的值来进行加减相互抵消，达成区域快速加减的目的，最后通过前缀和得到原数组"></a>通过改变b[i]的值来进行[i]后面元素统一修改，再通过改变结束位置的值来进行加减相互抵消，达成区域快速加减的目的，最后通过前缀和得到原数组</h4><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e6</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> a[N],b[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++ )<br>    &#123;<br>        cin&gt;&gt;a[i];<br>        b[i] = a[i] - a[i<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-keyword">while</span>( m-- )<br>    &#123;<br>        <span class="hljs-type">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        b[x] += z;<br>        b[y<span class="hljs-number">+1</span>] -= z;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++ )<br>    &#123;<br>        a[i] = a[i<span class="hljs-number">-1</span>] + b[i];<br>    &#125;<br><br>    <span class="hljs-type">int</span> mi = <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++ )<br>    &#123;<br>        mi = <span class="hljs-built_in">min</span>(mi,a[i]);<br>    &#125;<br>    cout&lt;&lt;mi;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公告栏&amp;使用教程</title>
    <link href="/2024/11/21/%E5%85%AC%E5%91%8A%E6%A0%8F/"/>
    <url>/2024/11/21/%E5%85%AC%E5%91%8A%E6%A0%8F/</url>
    
    <content type="html"><![CDATA[<p>先聊一聊我选择这个主题的原因哈，首先就是我自己本来就想去做一个写博客的网站，正巧前几天又有人问我如何使用hexo搭建自己的博客，我寻思反正闲的没事，就去搞一搞吧，正好就跟着教程去搞了下，无奈之下还是fluid好用，主要是由自动归档功能我还是比较喜欢的</p><span id="more"></span><p>使用教程：归档中包含所有文章，标签页面可以根据需要选择标签，右上角搜索的话是根据文章内容进行搜索的</p><hr><p>2024&#x2F;11&#x2F;26 更新： 添加了lazyload模组，加快网页加载速度。(虽然也没快到哪去…..)</p><p>2024&#x2F;11&#x2F;27 文章： 完成算法教学——双指针基础题目编写</p><p>2024&#x2F;11&#x2F;28 文章： 完成计组第一章内容粗略整理（外加一个作者刚分手,,,）</p><p>2025&#x2F;1&#x2F;1     文章：2025年第一篇！——Qt模仿制作tx会议时遇到的问题以及解决过程</p>]]></content>
    
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
