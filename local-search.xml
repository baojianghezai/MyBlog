<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>双指针</title>
    <link href="/2024/11/27/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <url>/2024/11/27/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1147">洛谷-P1147 连续自然数和</a></p><p>先来看一道例题</p><p>先来理解一下题意：给出一个整数M，构建一个从1到M的数列，然后从数列中选出一个l和r，如果<strong>l+(l+1)+(l+2)+……+r &#x3D; M</strong> 的话，则输出l和r</p><span id="more"></span><p>正常思路：从0到M枚举l，再去找出是否存在r值满足上面条件</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">su</span><span class="hljs-params">( <span class="hljs-type">int</span> l , <span class="hljs-type">int</span> r )</span> <span class="hljs-comment">//求出l到r所有数的和</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> suma = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = l; i &lt;= r ; i++ )<br>    &#123;<br>        suma += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> suma;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> l = <span class="hljs-number">1</span> ; l &lt;= m ; l++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> r = l ; r &lt;= m ; r++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span>( <span class="hljs-built_in">su</span>(l,r) == m )<br>            &#123;<br>                cout&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>嗯~再去瞅一眼时间复杂度</p><p><img src="/img/shuangzhizhen1.png" alt="image.png"></p><p>两层for循环，N^2了，再加上su函数也算一个l到r的循环</p><p>因此……时间复杂度来到了恐怖的N^3</p><p>M的数据量在10~2e6之间，所以这道题用这种方法的话包<strong>超时的</strong></p><p>再想想怎么去优化</p><p>首先想的的是我真的需要循环这么多次数吗？</p><p>由题目中描述<strong>“给出一个满足条件的连续正整数段中的第一个数和最后一个数”</strong>，可以知道两个数必然是连续的，又想到在M&#x2F;2往后将不会满足条件→当l&#x3D;M&#x2F;2的时候，下一个就已经超过M&#x2F;2，因此循环可以减少一半</p><p>再去想，当我的某个l找到对应的r之后，还需要继续去移动我的r指针吗？</p><p>→很明显答案是不需要，因为这时候r再+1的话，结果必定会大于M</p><p>因此我们可以直接break掉</p><p>修改之后的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">su</span><span class="hljs-params">( <span class="hljs-type">int</span> l , <span class="hljs-type">int</span> r )</span> <span class="hljs-comment">//求出l到r所有数的和</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> suma = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = l; i &lt;= r ; i++ )<br>    &#123;<br>        suma += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> suma;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> l = <span class="hljs-number">1</span> ; l &lt;= m/<span class="hljs-number">2</span> ; l++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> r = l ; r &lt;= m/<span class="hljs-number">2</span> ; r++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span>( <span class="hljs-built_in">su</span>(l,r) == m )<br>            &#123;<br>                cout&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度还是很大，这时候又可以想到从l加到r可以用一个叫前缀和的东西去解决</p><p>因此构建前缀和数组，优化函数部分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= m ; i++ )  <span class="hljs-comment">//构建前缀和数组</span><br>    &#123;<br>        a[i] = a[i<span class="hljs-number">-1</span>] + i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> l = <span class="hljs-number">1</span> ; l &lt;= m/<span class="hljs-number">2</span> ; l++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> r = l ; r &lt;= m/<span class="hljs-number">2</span> ; r++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span>( a[r]-a[l<span class="hljs-number">-1</span>] == m )<br>            &#123;<br>                cout&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好，时间复杂度已经优化到N^2&#x2F;4 了</p><p>但是还是非常大</p><p>这时候再去想：</p><p>枚举l的时候，是否需要将r移动到l+1的地方</p><p>推断一下：用<strong>sum表示从l加到r</strong>，假设此时sum&#x3D;&#x3D;m，当l往右移动一个的时候，sum变为sum-l，此时如果将r向右移动的话，必然会导致最终的sum&gt;m，这时候只能将l再次向右移动，但移动到什么程度为止，很明显我们不能非常容易的得到答案</p><p>那么我们可以去换一种思路</p><p>我将sum和m状态分为三种</p><blockquote><p>sum &gt; m</p></blockquote><blockquote><p>sum &#x3D; m</p></blockquote><blockquote><p>sum &lt; m</p></blockquote><p>在这三种状态下，再去想需要进行什么操作</p><blockquote><p><strong>sum &gt; m</strong> 需要去减小sum，要么l向右，要么r向左，由于我们需要将指针向一个方向移动，所以需要将l向右移动→既<strong>l++</strong></p></blockquote><blockquote><p>sum &#x3D; m 记录并输出</p></blockquote><blockquote><p><strong>sum &lt; m</strong> 需要增大sum，l向左移动，或者r向右移动，和第一个一样，选择向右移动→既<strong>r++</strong></p></blockquote><p>那这时候可能就会有杠精站出来了：</p><p>要是l向右移动的时候，漏掉了正确答案呢（也就是r需要向左动去寻找答案）</p><p>那这里咱也可以去推断一下嗷</p><p>首先l初始为1，r根据判断条件，无非两种结果：要么找到了sum&#x3D;m的点，要么直接变成sum &gt; m ，接下来就是去移动l了，当l向右移动过程中，如果有<strong>合适的r值</strong>，那么肯定是和l一起连续移动，那么一定会与<strong>现在的r值</strong>重合或者掠过，重合就是sum&#x3D;m，略过就是sum&gt;m，需要再去移动r，因此可以知道l向右移动的时候一定不会出现略过正确答案的情况</p><p>因此代码最终形态就变成了这样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= m ; i++ )<br>    &#123;<br>        a[i] = a[i<span class="hljs-number">-1</span>] + i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> l = <span class="hljs-number">1</span> , r = <span class="hljs-number">1</span> ; l &lt;= m/<span class="hljs-number">2</span> + <span class="hljs-number">1</span> ;)<br>    &#123;<br>        <span class="hljs-type">int</span> x = a[r] - a[l<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">while</span>( x &lt; m )<br>        &#123;<br>            r++;<br>            x = a[r] - a[l<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">while</span>( x &gt; m )<br>        &#123;<br>            l++;<br>            x = a[r] - a[l<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">if</span>( x == m )<br>        &#123;<br>            cout&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;<br>            l++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>( r &gt; m || l &gt; m/<span class="hljs-number">2</span> ) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;但是由于这道题数据卡的不是很严格，所以下面这种做法也可以</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N],b[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= m/<span class="hljs-number">2</span> + <span class="hljs-number">1</span> ; i++ )<br>    &#123;<br>        a[i] = i;<br>        b[i] = b[i<span class="hljs-number">-1</span>] + a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> l = <span class="hljs-number">1</span> ; l &lt;= m/<span class="hljs-number">2</span> + <span class="hljs-number">1</span> ; l++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> r = l<span class="hljs-number">+1</span> ; r &lt;= m/<span class="hljs-number">2</span> + <span class="hljs-number">1</span> ; r++ )<br>        &#123;<br>            <span class="hljs-type">int</span> x = b[r] - b[l<span class="hljs-number">-1</span>];<br>            <span class="hljs-keyword">if</span>( x &gt; m ) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span>( x == m )<br>            &#123;<br>                cout&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种思路就是当我r找的时候，如果发现sum&gt;m，那么就没有必要寻找下去了，直接break掉将l向右移动一个</p><p>这个时间复杂度的话，假设r做多找到m&#x2F;2，那么就是m^2&#x2F;4，其实随着l越来越大，r需要找的就更少，因此时间应该是远少于这个值的，具体看测试点吧，个人不太推荐这种做法</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前缀和</title>
    <link href="/2024/11/23/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <url>/2024/11/23/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p>前期最像算法的“基础算法”</p><p>首先看看怎么来的前缀和算法</p><p><a href="https://www.luogu.com.cn/problem/P8218">题目传送门</a></p><p>（经典例题区间和）</p><p>学前缀和之前：</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> n;<br>  cin&gt;&gt;n;<br>  <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>  &#123;<br>    cin&gt;&gt;a[i];<br>  &#125;<br>  <span class="hljs-type">int</span> m;<br>  cin&gt;&gt;m;<br>  <span class="hljs-keyword">while</span>( m-- )<br>  &#123;<br>    <span class="hljs-type">int</span> l,r;<br>    cin&gt;&gt;l&gt;&gt;r;<br>    <span class="hljs-type">int</span> su = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = l ; i &lt;= r ; i++ )<br>      su += a[i];<br>    cout&lt;&lt;su&lt;&lt;endl;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后浅浅看一眼时间复杂度</p><p><img src="/img/qianzhuihe1.png" alt="image.png"></p><p><code>对于所有测试数据，n,m≤10^5,ai​≤10^4</code></p><p>时间复杂度是O(m*(r-l))&#x3D;O(m*n)</p><p>所以我们取极限水准：m&#x3D;1e5,n&#x3D;1e5</p><p>算一下运算次数：10的10次方…….</p><p>正常来说算法题目使用c++一秒的运算次数在<strong>10的8次方</strong>左右</p><p>所以这么做的话肯定是完成不了我们的题目，由此我们就需要去寻找一个更好的计算方法→前缀和算法</p><p>前缀和思想：已知一个固定的序列，我想要求出从某个下标加到另一个下标，那么就可以使用累加的公式稍微变形</p><p>公式推导过程：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++">b[i] = a[<span class="hljs-number">1</span>] + a[<span class="hljs-number">2</span>] +......+ a[i]  <span class="hljs-comment">//前缀和定义     .1</span><br>b[j] = a[<span class="hljs-number">1</span>] + a[<span class="hljs-number">2</span>] +......+ a[i] + a[i<span class="hljs-number">+1</span>] +......+ a[j]    <span class="hljs-comment">//.2</span><br><span class="hljs-comment">//假设现在我要求a[i] 加到 a[j] 的和(j&gt;i)</span><br>将<span class="hljs-number">1</span>式和<span class="hljs-number">2</span>式上下相减可得<br>b[j] - b[i] = a[i<span class="hljs-number">+1</span>] + a[i<span class="hljs-number">+2</span>] +......+ a[j]<br><span class="hljs-comment">//发现等号右边加上个a[i]就是我们需要的东西了，所以等式两边同时加上a[i]</span><br>b[j] - b[i] + a[i] = a[i] + a[i<span class="hljs-number">+1</span>] + a[i<span class="hljs-number">+2</span>] +......+ a[j]<br><span class="hljs-comment">//所以右边那一大串就可以简化为</span><br>b[j] - b[i] + a[i]<br><span class="hljs-comment">//再根据b[i]定义</span><br>b[i] = a[<span class="hljs-number">1</span>] + a[<span class="hljs-number">2</span>] +......+ a[i]<br><span class="hljs-comment">//代换一下</span><br>b[j] - (a[<span class="hljs-number">1</span>]+a[<span class="hljs-number">2</span>]+....+a[i]) + a[i]<br>=b[j] - (a[<span class="hljs-number">1</span>]+a[<span class="hljs-number">2</span>]+......+a[i<span class="hljs-number">-1</span>])<br>=b[j] - b[i<span class="hljs-number">-1</span>]<br></code></pre></td></tr></table></figure><p>至此，前缀和公式推导完毕</p><p>接下来就是补充细节问题</p><ol><li><p>b[i]如果只用公式求，那么时间复杂度会非常大,运算次数：1+2+3+4+….+n,但是我们可以运用一下递推：b[i] &#x3D; b[i-1] + a[i],这样时间花费就会降到n次</p></li><li><p>根据递推公式和题目要求，如果原数组用不到的话，可以将a数组直接变成一个前缀和数组:a[i] &#x3D; a[i-1] + a[i]</p></li></ol><p>最终代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,l,r;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++ )<br>    &#123;<br>        cin&gt;&gt;a[i];<br>        a[i] = a[i<span class="hljs-number">-1</span>] + a[i];<br>    &#125;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">while</span>( m-- )<br>    &#123;<br>        cin&gt;&gt;l&gt;&gt;r;<br>        cout&lt;&lt; a[r] - a[l<span class="hljs-number">-1</span>] &lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>差分</title>
    <link href="/2024/11/23/%E5%B7%AE%E5%88%86/"/>
    <url>/2024/11/23/%E5%B7%AE%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2367">差分模板题传送门-洛谷</a></p><h4 id="差分经典模板题"><a href="#差分经典模板题" class="headerlink" title="差分经典模板题"></a>差分经典模板题</h4><p>还是看一下没学差分之前，暴力解题的代码</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e6</span><span class="hljs-number">+10</span>;<span class="hljs-comment">//根据题目给出的n值确定数组大小</span><br><span class="hljs-type">int</span> a[N];            <span class="hljs-comment">//确定数组大小</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++ )<br>    &#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">while</span>( m-- )     <span class="hljs-comment">//m次循环的快捷写法</span><br>    &#123;<br>        <span class="hljs-type">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = x ; i &lt;= y ; i++ )<br>        &#123;<br>            a[i] += z;   <span class="hljs-comment">//从第x到第y个学生的成绩加z</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> mi = <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++ )<br>    &#123;<br>        mi = <span class="hljs-built_in">min</span>(mi,a[i]);     <span class="hljs-comment">//寻找最小值</span><br>    &#125;<br>    cout&lt;&lt;mi;<br>&#125;<br></code></pre></td></tr></table></figure><p>再简单分析一下时间复杂度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">while</span>( m-- )     <span class="hljs-comment">//m次循环的快捷写法</span><br>    &#123;<br>        <span class="hljs-type">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = x ; i &lt;= y ; i++ )<br>        &#123;<br>            a[i] += z;   <span class="hljs-comment">//从第x到第y个学生的成绩加z</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>很明显这段代码就是我们运算次数最多的，看一下数据量</p><p><img src="/img/chafen1.png" alt="image.png"></p><p>可以发现n的极限为5<em>10的6次方，所以for循环内最大就是5</em>10的6次方</p><p>再结合m次循环，可以发现是一个O(n^2)的时间复杂度，很明显会超时</p><p><img src="/img/chafen2.png" alt="image.png"></p><p>也就是这样</p><h4 id="那怎么去优化我们的过程呢"><a href="#那怎么去优化我们的过程呢" class="headerlink" title="那怎么去优化我们的过程呢"></a>那怎么去优化我们的过程呢</h4><p>分析整个代码，我们可以发现，<code>while(m--)</code>这个循环是题目要求所必须的，所以只能对while里面的for循环下手</p><p>这里就可以从伟大的数学家那里窃取亿点点思路了</p><p>这里借鉴网上和我自己理解，写出俩差分的思路</p><p><img src="/img/chafen3.png" alt="image.png"></p><p><img src="/img/chafen4.png" alt="image.png"></p><h4 id="由此我们可以考虑构建一个差分数组，让b-i-a-i-a-i-1-i-0"><a href="#由此我们可以考虑构建一个差分数组，让b-i-a-i-a-i-1-i-0" class="headerlink" title="由此我们可以考虑构建一个差分数组，让b[i]&#x3D;a[i]-a[i-1]   (i&gt;0)"></a>由此我们可以考虑构建一个差分数组，让b[i]&#x3D;a[i]-a[i-1]   (i&gt;0)</h4><h4 id="通过改变b-i-的值来进行-i-后面元素统一修改，再通过改变结束位置的值来进行加减相互抵消，达成区域快速加减的目的，最后通过前缀和得到原数组"><a href="#通过改变b-i-的值来进行-i-后面元素统一修改，再通过改变结束位置的值来进行加减相互抵消，达成区域快速加减的目的，最后通过前缀和得到原数组" class="headerlink" title="通过改变b[i]的值来进行[i]后面元素统一修改，再通过改变结束位置的值来进行加减相互抵消，达成区域快速加减的目的，最后通过前缀和得到原数组"></a>通过改变b[i]的值来进行[i]后面元素统一修改，再通过改变结束位置的值来进行加减相互抵消，达成区域快速加减的目的，最后通过前缀和得到原数组</h4><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e6</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> a[N],b[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++ )<br>    &#123;<br>        cin&gt;&gt;a[i];<br>        b[i] = a[i] - a[i<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-keyword">while</span>( m-- )<br>    &#123;<br>        <span class="hljs-type">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        b[x] += z;<br>        b[y<span class="hljs-number">+1</span>] -= z;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++ )<br>    &#123;<br>        a[i] = a[i<span class="hljs-number">-1</span>] + b[i];<br>    &#125;<br><br>    <span class="hljs-type">int</span> mi = <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++ )<br>    &#123;<br>        mi = <span class="hljs-built_in">min</span>(mi,a[i]);<br>    &#125;<br>    cout&lt;&lt;mi;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公告栏&amp;使用教程</title>
    <link href="/2024/11/21/%E5%85%AC%E5%91%8A%E6%A0%8F/"/>
    <url>/2024/11/21/%E5%85%AC%E5%91%8A%E6%A0%8F/</url>
    
    <content type="html"><![CDATA[<p>先聊一聊我选择这个主题的原因哈，首先就是我自己本来就想去做一个写博客的网站，正巧前几天又有人问我如何使用hexo搭建自己的博客，我寻思反正闲的没事，就去搞一搞吧，正好就跟着教程去搞了下，无奈之下还是fluid好用，主要是由自动归档功能我还是比较喜欢的</p><span id="more"></span><p>使用教程：归档中包含所有文章，标签页面可以根据需要选择标签，右上角搜索的话是根据文章内容进行搜索的</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>&emsp;&emsp;<strong>前缀和</strong><br>&emsp;&emsp;<strong>差分</strong><br>&emsp;&emsp;<strong>双指针</strong></p><p>2024&#x2F;11&#x2F;26 更新： 添加了lazyload模组，加快网页加载速度。(虽然也没快到哪去…..)</p><p>2024&#x2F;11&#x2F;27 文章： 完成算法教学——双指针基础题目编写</p>]]></content>
    
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
